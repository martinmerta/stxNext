{"version":3,"sources":["components/Book.js","components/ShowBook.js","components/FetchBooks.js","App.js","serviceWorker.js","index.js"],"names":["Book","title","img","description","shortenedDesc","substring","className","src","alt","ShowBook","books","useState","content","setMoreContent","useEffect","window","addEventListener","innerHeight","document","documentElement","scrollTop","offsetHeight","removeEventListener","length","slice","FetchBooks","searchBy","inputValue","setBooks","readyBooks","setreadyBooks","controller","AbortController","fetch","signal","method","headers","then","res","status","json","Error","jsonData","items","catch","err","message","abort","keyCounter","undefined","booksToShow","map","book","volumeInfo","imageLinks","thumbnail","key","App","setSearchValue","setInputValue","type","name","value","onChange","e","text","currentTarget","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b10453fa.chunk.js","sourcesContent":["import React from 'react';\nconst Book = ({ title, img, description }) => {\n  const shortenedDesc = description\n    ? `${description.substring(0, 200)}...`\n    : 'There is no description for this book';\n  return (\n    <div className='book'>\n      <h1 className='book-title'>{title}</h1>\n      <img className='book-Img' src={`${img}`} alt={title} />\n      <p className='book-desc'>{shortenedDesc}</p>\n    </div>\n  );\n};\n\nexport default Book;\n","import { useState, useEffect } from 'react';\nconst ShowBook = ({ books }) => {\n  const [content, setMoreContent] = useState(false);\n  useEffect(() => {\n    window.addEventListener('scroll', () => {\n      if (\n        window.innerHeight + document.documentElement.scrollTop !==\n        document.documentElement.offsetHeight\n      ) {\n        return setMoreContent(true);\n      }\n    });\n    return () =>\n      window.removeEventListener('scroll', () => {\n        if (\n          window.innerHeight + document.documentElement.scrollTop !==\n          document.documentElement.offsetHeight\n        ) {\n          return setMoreContent(true);\n        }\n      });\n  }, []);\n  if (!content && books.length > 3) {\n    return books.slice(0, 2);\n  } else {\n    return books;\n  }\n};\n\nexport default ShowBook;\n","import React, { useState, useEffect } from 'react';\nimport Book from './Book';\nimport ShowBook from './ShowBook';\nconst FetchBooks = ({ searchBy, inputValue }) => {\n  const [books, setBooks] = useState([]);\n  const [readyBooks, setreadyBooks] = useState([]);\n  useEffect(() => {\n    const controller = new AbortController();\n    fetch(\n      `https://www.googleapis.com/books/v1/volumes?q=${searchBy}:${inputValue}`,\n      {\n        signal: controller.signal,\n        method: 'GET',\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Credentials': true,\n          'Access-Control-Allow-Methods': 'POST, GET',\n          'Content-Type': 'application/json'\n        }\n      }\n    )\n      .then(res => {\n        if (res.status === 200) {\n          return res.json();\n        } else {\n          throw new Error(`${res.status} Sorry something gone wrong.. ;(`);\n        }\n      })\n      .then(jsonData => {\n        setBooks(jsonData.items);\n      })\n      .catch(err => {\n        return new Error(err.message);\n      });\n    return () => controller.abort();\n  }, [searchBy, inputValue]);\n  useEffect(() => {\n    let keyCounter = 0;\n    if (books !== undefined) {\n      const booksToShow = books.map(book => {\n        keyCounter++;\n        const { title, description } = book.volumeInfo;\n        const img = book.volumeInfo.imageLinks\n          ? book.volumeInfo.imageLinks.thumbnail\n          : null;\n        return (\n          <Book\n            title={title}\n            img={img}\n            description={description}\n            key={title + keyCounter}\n          />\n        );\n      });\n      if (booksToShow !== undefined) {\n        return setreadyBooks(booksToShow);\n      }\n    } else {\n      return setreadyBooks(\n        <Book\n          title={'Upps.. Smomething gone wrong..'}\n          description={'Please try again'}\n        />\n      );\n    }\n  }, [books]);\n  return <ShowBook books={readyBooks} />;\n};\n\nexport default FetchBooks;\n","import React, { useState } from 'react';\nimport FetchBooks from './components/FetchBooks';\nimport './App.css';\nfunction App() {\n  const [searchBy, setSearchValue] = useState('intitle');\n  const [inputValue, setInputValue] = useState('');\n  return (\n    <div className='App'>\n      <h1 className='helloTitle'>\n        Hello, welcome to the best book searching site ever!\n      </h1>\n      <form className='form'>\n        <label>\n          Type what you want to search:\n          <input\n            type='text'\n            name='inputValue'\n            value={inputValue}\n            onChange={e => {\n              const text = e.currentTarget.value;\n              setInputValue(text);\n            }}\n          />\n        </label>\n        <label>\n          Search by:\n          <select\n            value={searchBy}\n            onChange={e => {\n              const value = e.currentTarget.value;\n              setSearchValue(value);\n              setInputValue('');\n            }}\n          >\n            <option value='intitle'>title</option>\n            <option value='inauthor'>author</option>\n            <option value='inpublisher'>publisher</option>\n            <option value='isbn'>ISBN number</option>\n          </select>\n        </label>\n      </form>\n      {inputValue !== '' ? (\n        <FetchBooks searchBy={searchBy} inputValue={inputValue} />\n      ) : null}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}